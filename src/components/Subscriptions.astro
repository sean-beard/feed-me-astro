---
import { get } from "../utils/api";
import { getAuthToken } from "../utils/getAuthToken";

interface Subscription {
  id: number;
  feedName: string;
}

interface SubscriptionsData {
  status: number;
  subscriptions: Subscription[];
}

let status = 0;
let subscriptions: Subscription[] = [];

try {
  // TODO refactor getAuthToken
  const data = await get<SubscriptionsData>({
    path: "/subscription",
    token: getAuthToken(Astro.cookies) ?? "",
  });

  status = data.status;
  subscriptions = data.subscriptions;
} catch (error) {
  if (error instanceof Error) {
    status = 500;
  }
}
---

<script>
  import Cookies from "js-cookie";

  import { deleteRequest } from "../utils/api";

  interface UnsubscribeData {
    status: number;
  }

  interface Dataset {
    subId?: number;
  }

  const unsubscribeButton = document.getElementById("unsubscribeButton");
  const token = Cookies.get("token") ?? "";

  if (unsubscribeButton && token) {
    unsubscribeButton.addEventListener("click", async (event) => {
      const target = event.target as EventTarget & { dataset?: Dataset };
      const subscriptionId = target?.dataset?.subId;

      if (!subscriptionId) {
        return;
      }

      try {
        const { status } = await deleteRequest<UnsubscribeData>({
          path: "/subscription",
          token,
          body: { subscriptionId },
        });

        if (status === 200) {
          window.location.reload();
        } else {
          // TODO: handle error
        }
      } catch {
        // TODO: handle error
      }
    });
  }
</script>

<div>
  <h2>Your subscriptions</h2>

  {
    status === 500 && (
      <h3 class="error">
        Oops! There was an issue getting your subscriptions. Please try again
        later.
      </h3>
    )
  }

  {
    subscriptions.length > 0 && (
      <ul>
        {subscriptions.map((sub) => {
          return (
            <li class="row">
              <p class="feed">{sub.feedName}</p>

              <div class="btn-wrapper">
                <button id="unsubscribeButton" class="btn" data-sub-id={sub.id}>
                  Unsubscribe
                </button>
              </div>
            </li>
          );
        })}
      </ul>
    )
  }

  {
    !subscriptions.length && (
      <p>Nothing to see here! Subscribe to your first feed above.</p>
    )
  }
</div>

<style>
  p {
    font-size: 1.25em;
  }

  .row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 1rem auto;
    max-width: 400px;
    width: 100%;
  }

  .feed {
    text-align: left;
    margin-right: 1rem;
  }

  .btn-wrapper {
    flex: 1;
    text-align: right;
  }

  .btn {
    background-color: maroon;
    text-transform: none;
  }

  .btn:focus,
  .btn:hover {
    background-color: white;
    color: maroon;
  }

  .error {
    color: maroon;
    font-size: 1.5em;
  }

  /* Mobile */
  @media (max-width: 37.5em) {
    .row {
      padding: 0 2rem;
    }
  }
</style>
