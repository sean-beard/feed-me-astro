---
import { get } from "utils/api";
import { getAuthToken } from "utils/getAuthToken";
import type { Subscription } from "utils/types";
import { SubscriptionRow } from "./SubscriptionRow";

interface SubscriptionsData {
  status: number;
  subscriptions: Subscription[];
}

let status = 0;
let subscriptions: Subscription[] = [];

const token = getAuthToken(Astro.cookies);

try {
  const data = await get<SubscriptionsData>({
    path: "/subscription",
    token,
  });

  status = data.status;
  subscriptions = data.subscriptions;
} catch (error) {
  if (error instanceof Error) {
    status = 500;
  }
}
---

<script>
  import { handleNotificationPreferenceToggle } from "utils/serviceWorker";

  import type { Account } from "utils/types";

  const initializeToggleElement = async () => {
    const toggleElement = document.getElementById(
      "notif-toggle"
    ) as HTMLInputElement | null;

    if (toggleElement) {
      const data = await fetch("/account.json", {
        headers: { "Content-Type": "application/json" },
      });

      const account: Account = await data.json();

      toggleElement.checked =
        !!account.notificationEnabled && Notification.permission === "granted";

      // use react and MouseEvent<HTMLInputElement> ?
      toggleElement.addEventListener(
        "click",
        handleNotificationPreferenceToggle
      );
    }
  };

  initializeToggleElement();
</script>

<div>
  <h2>Your subscriptions</h2>

  {
    status === 500 && (
      <h3 class="error">
        Oops! There was an issue getting your subscriptions. Please try again
        later.
      </h3>
    )
  }

  {
    subscriptions.length > 0 && (
      <div class="switch">
        <label>
          Nofitications: Off
          <input id="notif-toggle" type="checkbox" />
          <span class="lever" />
          On
        </label>
      </div>
    )
  }

  {
    subscriptions.length > 0 && (
      <ul>
        {subscriptions.map((subscription) => {
          return (
            <SubscriptionRow
              client:visible
              subscription={subscription}
              token={token}
            />
          );
        })}
      </ul>
    )
  }

  {
    !subscriptions.length && (
      <p>Nothing to see here! Subscribe to your first feed above.</p>
    )
  }
</div>

<style>
  p {
    font-size: 1.25em;
  }

  .error {
    color: maroon;
    font-size: 1.5em;
  }

  .switch label {
    color: #2c3e50;
    font-size: 1.2em;
  }

  .switch label input[type="checkbox"]:checked + .lever {
    background-color: #1565c0;
  }
  .switch label input[type="checkbox"]:checked + .lever::after {
    background-color: #1a237e;
  }
</style>
