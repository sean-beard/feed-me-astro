---
import { Article } from "components/FeedItemPage/Article";
import { AudioPlayer } from "components/FeedItemPage/AudioPlayer";
import { ToggleItemStatusButton } from "components/FeedItemPage/ToggleItemStatusButton";
import { YoutubeVideo } from "components/FeedItemPage/YoutubeVideo";
import Layout from "layouts/Layout.astro";
import { get } from "utils/api";
import { getAuthToken } from "utils/getAuthToken";
import type { FeedItem } from "utils/types";

const { itemId } = Astro.params;

let feedItem: FeedItem | undefined;
let feedItemError: string | undefined;

const token = getAuthToken(Astro.cookies);

try {
  const data = await get<{ status: number; item: FeedItem }>({
    path: `/item/${itemId}`,
    token,
  });

  if (data.status !== 200) {
    feedItemError = "Oops! There was an error loading this feed item.";
    return;
  }

  feedItem = data.item;
} catch {
  feedItemError = "Oops! There was an error loading this feed item.";
}

const getParameterByName = (url: string, name: string) => {
  const match = RegExp("[?&]" + name + "=([^&]*)").exec(url);
  return match && decodeURIComponent(match[1].replace(/\+/g, " "));
};

const youtubeVideoId = getParameterByName(feedItem?.url ?? "", "v");
const shouldRenderAudioPlayer =
  feedItem?.mediaType === "audio/mpeg" && !!feedItem?.mediaUrl;
const shouldRenderArticle =
  !shouldRenderAudioPlayer && !youtubeVideoId && feedItem?.description;
---

<Layout title="FeedMe">
  {feedItemError && <h2>{feedItemError}</h2>}

  {
    feedItem && !feedItemError && (
      <div class={youtubeVideoId ? "" : "feed-item-page-container"}>
        <ToggleItemStatusButton client:load feedItem={feedItem} />

        <h2 class="title">{feedItem.title}</h2>

        <div class={youtubeVideoId ? "" : "item-container"}>
          <div class="item">
            {shouldRenderAudioPlayer && (
              // @ts-ignore mediaUrl IS defined, TS just isn't narrowing the type
              <AudioPlayer client:load feedItem={feedItem} />
            )}

            {youtubeVideoId && (
              <YoutubeVideo client:only="react" videoId={youtubeVideoId} />
            )}

            {shouldRenderArticle && (
              <Article client:only description={feedItem.description} />
            )}
          </div>

          <a href={feedItem.url} target="_blank" rel="noopener">
            {feedItem.url}
          </a>
        </div>
      </div>
    )
  }
</Layout>

<style>
  * {
    text-align: center;
  }

  .feed-item-page-container {
    width: 90%;
    max-width: 1000px;
    margin: 0 auto;
  }

  .title {
    margin: 0 auto;
    margin-bottom: 2.5rem;
  }

  .item {
    margin-bottom: 2rem;
  }

  .item-container {
    padding: 0.5rem 1rem;
  }

  /* Mobile */
  @media (max-width: 37.5em) {
    .item-container {
      margin: 1rem auto 2rem auto;
      padding: 0;
    }

    .feed-item-page-container {
      width: 95%;
    }
  }
</style>
